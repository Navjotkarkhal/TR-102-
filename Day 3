{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOR3hOFXDlFhH3+cgoNeUr8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Navjotkarkhal/TR-102-/blob/main/TR_8th_june.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 8th june\n",
        "**Covered Topics**\n",
        "1. Tuple\n",
        "   -Methods of Tuple\n",
        "  -some Practice Questions on Tuple\n",
        "2. introduction to Dictionary in Python"
      ],
      "metadata": {
        "id": "KTSLokpNa-GG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#creating a tuple\n",
        "Fruits = ('apple','banana','cherry')\n",
        "print(Fruits)\n",
        "type(Fruits)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q5iz--fwbbJ9",
        "outputId": "08e04674-ae72-4aba-a4f6-7356268328d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('apple', 'banana', 'cherry')\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tuple"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#count method\n",
        "a = (0,1,(2,3),(2,3),1,[3,2],'geek',(0,))\n",
        "res = a.count((2,3))\n",
        "print(res)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ul6OTBqSbs14",
        "outputId": "eb39d0ba-8586-4f97-c00b-82292f9af8a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = (0,1,(2,3),(2,3),1,[3,2],'geek',(0,))\n",
        "res = a.count((2,3))\n",
        "print(\"2,3 comes \",res)\n",
        "res1 = a.count([3,2])\n",
        "print(\"3,2 comes \",res1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CZmb5znXdQjP",
        "outputId": "54023810-cf37-4ff0-931f-d9c368ec3dd6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2,3 comes  2\n",
            "3,2 comes  1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#check existance of any element in tuple using in keyword\n",
        "city = ('Ludhiana','Kota','Mumbai','Delhi')\n",
        "if 'Ludhiana' in city:\n",
        "  print('yes ludhian is present in city')\n",
        "else:\n",
        "  print('no ludhian is present in city')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IzQyzvdHcQMq",
        "outputId": "da9d227b-6021-4444-b1ef-4b79531b9e65"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "yes ludhian is present in city\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Tuples are immutable in nature\n",
        "nums = [1,2,3,4]\n",
        "nums[4] = 5\n",
        "print(nums)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        },
        "id": "mMrAQ6Q9cgPi",
        "outputId": "7b2824a8-6749-49f2-e370-82cfbb637caa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndexError",
          "evalue": "list assignment index out of range",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-5-ce424a54416c>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Tuples are immutable in nature\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mnums\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mnums\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnums\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mIndexError\u001b[0m: list assignment index out of range"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Thats why there is error (IndexError: list assignment index out of range)\n"
      ],
      "metadata": {
        "id": "cTB7Js_2cwyZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#if we want to change tuples we can use list functions\n",
        "country = ('india','srilanka','america')\n",
        "y = list(country)\n",
        "y[0] = 'bangladesh'\n",
        "x = tuple(y)\n",
        "print(x)\n",
        "type(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EuxPtuLSc6Y2",
        "outputId": "fa7c5c67-8d59-4900-819b-4496b2a45803"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('bangladesh', 'srilanka', 'america')\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tuple"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#index method\n",
        "tuple1 = (0,1,2,3,2,3,1,3,2)\n",
        "res = tuple1.index(3)\n",
        "print(\"first occurence of 3 in tuple \",res)\n",
        "\n",
        "res1 = tuple1.index(3)\n",
        "print(\"index of first occuring 3 in tuple1 is \",res1)\n",
        "res2 = tuple1.index(3,4,6)\n",
        "print(\"index of 3 after 4 to 6 indices is \",res2)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WcTWcTxBctHn",
        "outputId": "4cbe99ae-21be-4a27-a685-f0fc6f0c91d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "first occurence of 3 in tuple  3\n",
            "index of first occuring 3 in tuple1 is  3\n",
            "index of 3 after 4 to 6 indices is  5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#reverse array elements\n",
        "nums = (1,2,3,4,5)\n",
        "print(nums[::-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kZfaP2kmdZ35",
        "outputId": "9d3a5962-de3b-400d-d583-951ae959d22b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(5, 4, 3, 2, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Practice Questions**"
      ],
      "metadata": {
        "id": "4OWq9GnweE-Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Concate two tuples\n",
        "fruits1 = ('apple','banana','berries')\n",
        "fruits2 =('strawberries','blueberry')\n",
        "combined_fruits = fruits1 + fruits2\n",
        "print(combined_fruits)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "duGgtpJkeQnx",
        "outputId": "1772cb31-0291-4e83-bbbf-10e36bc36fd7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('apple', 'banana', 'berries', 'strawberries', 'blueberry')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grades = (90,85,92,88,95)\n",
        "res = grades.count(88)\n",
        "print(\"88 occurs in grades \",res)\n",
        "res1 = grades.index(92)\n",
        "print(\"index of 92 is \", res1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SkBN6umgeXyB",
        "outputId": "60c73c49-3840-4215-f711-9096423dc63a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "88 occurs in grades  1\n",
            "index of 92 is  2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mixed_tuple = ('apple',42,3.14)\n",
        "print(mixed_tuple[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TS5pYLbmecuZ",
        "outputId": "73f89961-3feb-4e6e-8e7c-e4091cab358c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "42\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Problem 1 : You are managing employee records for a company. Each employee's record is stored as a tuple containing their name, ID, and department. Create a list of tuples to store these records. Write a function to add a new employee, another to find an employee by their ID, and a function to update the department of a specific employee"
      ],
      "metadata": {
        "id": "BQ4r8ALRfBTn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "employee_records = []\n",
        "employee_records.append((\"navjot\", 1, \"Management\"))\n",
        "employee_records.append((\"Akash\", 2, \"IT\"))\n",
        "employee_records.append((\"Priti\", 3, \"Finance\"))\n",
        "\n",
        "print(\"Employee Records:\", employee_records)\n",
        "employee_id_to_find = 2\n",
        "found_employee = None\n",
        "\n",
        "for employee in employee_records:\n",
        "    if employee[1] == employee_id_to_find:\n",
        "        found_employee = employee\n",
        "        break\n",
        "\n",
        "print(\"Found Employee:\", found_employee)\n",
        "\n",
        "employee_id_to_update = 2\n",
        "new_department = \"Marketing\"\n",
        "\n",
        "for i in range(len(employee_records)):\n",
        "    if employee_records[i][1] == employee_id_to_update:\n",
        "        employee_records[i] = (employee_records[i][0], employee_id_to_update, new_department)\n",
        "        break\n",
        "\n",
        "# Print the updated list of employee records\n",
        "print(\"Updated Employee Records:\", employee_records)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TrgrSfcZfImj",
        "outputId": "0a4853c8-e837-4723-c3f9-f453e848a34a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Employee Records: [('navjot', 1, 'Management'), ('Akash', 2, 'IT'), ('Priti', 3, 'Finance')]\n",
            "Found Employee: ('Akash', 2, 'IT')\n",
            "Updated Employee Records: [('navjot', 1, 'Management'), ('Akash', 2, 'Marketing'), ('Priti', 3, 'Finance')]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.\n",
        "   - You are working on a mapping application that stores geographical coordinates (latitude and longitude) as tuples. Create a list of these coordinate tuples. Write functions to add a new coordinate, find a specific coordinate, and calculate the distance between two coordinates.\n",
        "   "
      ],
      "metadata": {
        "id": "AZxoPXp0laLD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "# Define the points\n",
        "\n",
        "self_coordinate = []\n",
        "p1 = (23, -88)\n",
        "p2 = (6, 42)\n",
        "\n",
        "self_coordinate.append((34,16))\n",
        "\n",
        "p1_dist = p1[0]**2 + p1[1]**2\n",
        "p2_dist = p2[0]**2 + p2[1]**2\n",
        "\n",
        "distance = math.sqrt(p1_dist + p2_dist)\n",
        "\n",
        "print(f\"Euclidean distance between p1 and p2: {distance}\")\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oyeJfPkzlb1Q",
        "outputId": "8d727594-3f6a-4cc5-ed9e-b7ebbd077556"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Euclidean distance between p1 and p2: 100.36433629531956\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Problem 3 : You have a list of students, where each student is represented as a tuple containing their name, age, and grade. Write a function to add a new student, another function to remove a student by name, and a function to find the student with the highest grade."
      ],
      "metadata": {
        "id": "yqkNKJvYqsKg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "student_record = []\n",
        "\n",
        "# Add students to the record (name, age, grade)\n",
        "student_record.append((\"Navjot\", 85))\n",
        "student_record.append((\"Akash\", 22, 92))\n",
        "student_record.append((\"Ravi\", 21, 78))\n",
        "\n",
        "# Print the current list of students\n",
        "print(\"Current student records:\")\n",
        "for student in student_record:\n",
        "    print(student)\n",
        "\n",
        "name_to_remove = \"Navjot\"\n",
        "\n",
        "for student in student_record:\n",
        "    if student[0] == name_to_remove:\n",
        "        student_record.remove(student)\n",
        "\n",
        "highest_grade_student = None\n",
        "highest_grade = -1\n",
        "\n",
        "for student in student_record:\n",
        "    if student[2] > highest_grade:\n",
        "        highest_grade = student[2]\n",
        "        highest_grade_student = student\n",
        "if highest_grade_student:\n",
        "    print(f\"\\nStudent with the highest grade: {highest_grade_student}\")\n",
        "else:\n",
        "    print(\"\\nNo students in the record\")\n"
      ],
      "metadata": {
        "id": "K01XrqV2ehaV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c4f37fcd-8117-4bc5-9a2e-2efc06ce122d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Current student records:\n",
            "('Navjot', 85)\n",
            "('Akash', 22, 92)\n",
            "('Ravi', 21, 78)\n",
            "\n",
            "Student with the highest grade: ('Akash', 22, 92)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Problem 4: on system for a software application where configurations are stored as tuples. Each configuration contains a setting name and its value. Write a function to add a new configuration, check if a specific setting exists, and retrieve the value of a specific setting."
      ],
      "metadata": {
        "id": "sDau9L1tuZ0l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "configuration = []\n",
        "configuration.append(('A',100))\n",
        "configuration.append(('B',234))\n",
        "configuration.append(('C',645))\n",
        "\n",
        "for config in configuration:\n",
        "  print(config)\n",
        "\n",
        "\n",
        "# to check specific config\n",
        "\n",
        "setting_check = 'A'\n",
        "for config in  configuration :\n",
        "  if config[0] ==  setting_check:\n",
        "    setting_exists = True\n",
        "\n",
        "    print(f\"Setting '{setting_check}' exists: {setting_exists}\")\n",
        "\n",
        "setting_to_get = 'B'\n",
        "setting_value = None\n",
        "for config in configuration:\n",
        "  if config[0] == setting_to_get:\n",
        "    setting_value = config[1]\n",
        "    print(f\"Value of setting '{setting_to_get}': {setting_value}\")\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y3Wxkq5traNr",
        "outputId": "a3717c5b-c043-487f-b11a-0643704a32f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('A', 100)\n",
            "('B', 234)\n",
            "('C', 645)\n",
            "Setting 'A' exists: True\n",
            "Value of setting 'B': 234\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Problem 5: Manage an inventory system where each product is represented as a tuple containing the product name, price, and quantity. Create a list of these product tuples. Write functions to add a new product, update the price of an existing product, and find the total inventory value."
      ],
      "metadata": {
        "id": "q33wn4Tnw-Hy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inventory = []\n",
        "inventory.append(('creals',100,5))\n",
        "inventory.append(('rice',150,8))\n",
        "inventory.append(('sugar',130,12))\n",
        "#print current inventory\n",
        "print(\"cuurent inventory products\")\n",
        "for product in inventory:\n",
        "  print(product)\n",
        "\n",
        "new_product = ('Milk',200,10)\n",
        "inventory.append(new_product)\n",
        "\n",
        "for product in inventory:\n",
        "  print(inventory)\n",
        "product_to_update = \"rice\"\n",
        "new_price = 160\n",
        "for i in range(len(inventory)):\n",
        "    if inventory[i][0] == product_to_update:\n",
        "        product_name, _, quantity = inventory[i]\n",
        "        inventory[i] = (product_name, new_price, quantity)\n",
        "        break\n",
        "print(\"updated price inventory list\")\n",
        "for product in inventory:\n",
        "  print(product)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1moZ95gxweox",
        "outputId": "bb58f88a-70db-411d-c0af-d5035f705d45"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cuurent inventory products\n",
            "('creals', 100, 5)\n",
            "('rice', 150, 8)\n",
            "('sugar', 130, 12)\n",
            "[('creals', 100, 5), ('rice', 150, 8), ('sugar', 130, 12), ('Milk', 200, 10)]\n",
            "[('creals', 100, 5), ('rice', 150, 8), ('sugar', 130, 12), ('Milk', 200, 10)]\n",
            "[('creals', 100, 5), ('rice', 150, 8), ('sugar', 130, 12), ('Milk', 200, 10)]\n",
            "[('creals', 100, 5), ('rice', 150, 8), ('sugar', 130, 12), ('Milk', 200, 10)]\n",
            "updated price inventory list\n",
            "('creals', 100, 5)\n",
            "('rice', 160, 8)\n",
            "('sugar', 130, 12)\n",
            "('Milk', 200, 10)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Problem 6** Develop a contact list application where each contact is stored as a tuple containing their name, phone number, and email address. Write functions to add a new contact, search for a contact by name, and update the phone number of a specific contact"
      ],
      "metadata": {
        "id": "ZsvR24RSzqir"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "contact_list = []\n",
        "contact_list.append(('navjot',120,'nav@120'))\n",
        "contact_list.append(('akash',121,'ak@121'))\n",
        "contact_list.append(('ravi',122,'ravi@122'))\n",
        "\n",
        "name_to_search = \"navjot\"\n",
        "contact_found = None\n",
        "for contact in contact_list:\n",
        "    if contact[0] == name_to_search:\n",
        "        contact_found = contact\n",
        "    if contact_found:\n",
        "      print(f\"\\nContact found: {contact_found}\")\n",
        "    else:\n",
        "      print(f\"\\nContact {name_to_search} not found\")\n",
        "\n",
        "name_to_update = \"navjot\"\n",
        "new_phone_number = \"123\"\n",
        "\n",
        "# Iterate through the contact list to find and update the contact's phone number\n",
        "for i in range(len(contact_list)):\n",
        "    if contact_list[i][0] == name_to_update:\n",
        "        name, _, email = contact_list[i]\n",
        "        contact_list[i] = (name, new_phone_number, email)\n",
        "        break\n",
        "\n",
        "# Print the updated contact list\n",
        "print(\"\\nUpdated contact list after updating phone number:\")\n",
        "for contact in contact_list:\n",
        "    print(contact)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PKtXVnRuyVC0",
        "outputId": "fee69fc8-3ef2-494c-a10a-e4445461a48b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Contact found: ('navjot', 120, 'nav@120')\n",
            "\n",
            "Contact found: ('navjot', 120, 'nav@120')\n",
            "\n",
            "Contact found: ('navjot', 120, 'nav@120')\n",
            "\n",
            "Updated contact list after updating phone number:\n",
            "('navjot', '123', 'nav@120')\n",
            "('akash', 121, 'ak@121')\n",
            "('ravi', 122, 'ravi@122')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "** Problem 7** You are managing course schedules for a university. Each course is represented as a tuple containing the course name, instructor, and meeting time. Create a list of these course tuples. Write functions to add a new course, find all courses taught by a specific instructor, and update the meeting time of a specific course."
      ],
      "metadata": {
        "id": "CvckQ32-_Ccy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize an empty list to store course tuples\n",
        "course_list = []\n",
        "\n",
        "# Add courses to the course list (course_name, instructor, meeting_time)\n",
        "course_list.append((\"Data analytics\", \"Mukta\", \"MWF 9:00-10:00\"))\n",
        "course_list.append((\"Physics\", \"Dr. Johnson\", \"TTh 10:00-11:30\"))\n",
        "course_list.append((\"Chemistry\", \"Dr. Lee\", \"MWF 11:00-12:00\"))\n",
        "\n",
        "# Print the current course list\n",
        "print(\"Current course list:\")\n",
        "for course in course_list:\n",
        "    print(course)\n",
        "# Adding a new course\n",
        "new_course = (\"Biology\", \"Dr. Brown\", \"TTh 1:00-2:30\")\n",
        "course_list.append(new_course)\n",
        "\n",
        "# Print the updated course list\n",
        "print(\"\\nUpdated course list after adding a new course:\")\n",
        "for course in course_list:\n",
        "    print(course)\n",
        "# Find all courses taught by a specific instructor\n",
        "instructor_to_find = \"Dr. Johnson\"\n",
        "courses_by_instructor = []\n",
        "for course in course_list:\n",
        "    if course[1] == instructor_to_find:\n",
        "        courses_by_instructor.append(course)\n",
        "\n",
        "print(f\"\\nCourses taught by {instructor_to_find}:\")\n",
        "for course in courses_by_instructor:\n",
        "    print(course)\n",
        "# Update the meeting time of a specific course\n",
        "course_to_update = \"Calculus\"\n",
        "new_meeting_time = \"MWF 8:00-9:00\"\n",
        "\n",
        "# Iterate through the course list to find and update the course's meeting time\n",
        "for i in range(len(course_list)):\n",
        "    if course_list[i][0] == course_to_update:\n",
        "      course_name,instructor,_ = course_list[i]\n",
        "      course_list[i] = (course_name,instructor,new_meeting_time)\n",
        "      break\n",
        "for contact in course_list:\n",
        "  print(course_list)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CfzbSpqq-xHZ",
        "outputId": "11f5ac60-a043-4a99-d623-c1faa2e1b0f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Current course list:\n",
            "('Data analytics', 'Mukta', 'MWF 9:00-10:00')\n",
            "('Physics', 'Dr. Johnson', 'TTh 10:00-11:30')\n",
            "('Chemistry', 'Dr. Lee', 'MWF 11:00-12:00')\n",
            "\n",
            "Updated course list after adding a new course:\n",
            "('Data analytics', 'Mukta', 'MWF 9:00-10:00')\n",
            "('Physics', 'Dr. Johnson', 'TTh 10:00-11:30')\n",
            "('Chemistry', 'Dr. Lee', 'MWF 11:00-12:00')\n",
            "('Biology', 'Dr. Brown', 'TTh 1:00-2:30')\n",
            "\n",
            "Courses taught by Dr. Johnson:\n",
            "('Physics', 'Dr. Johnson', 'TTh 10:00-11:30')\n",
            "[('Data analytics', 'Mukta', 'MWF 9:00-10:00'), ('Physics', 'Dr. Johnson', 'TTh 10:00-11:30'), ('Chemistry', 'Dr. Lee', 'MWF 11:00-12:00'), ('Biology', 'Dr. Brown', 'TTh 1:00-2:30')]\n",
            "[('Data analytics', 'Mukta', 'MWF 9:00-10:00'), ('Physics', 'Dr. Johnson', 'TTh 10:00-11:30'), ('Chemistry', 'Dr. Lee', 'MWF 11:00-12:00'), ('Biology', 'Dr. Brown', 'TTh 1:00-2:30')]\n",
            "[('Data analytics', 'Mukta', 'MWF 9:00-10:00'), ('Physics', 'Dr. Johnson', 'TTh 10:00-11:30'), ('Chemistry', 'Dr. Lee', 'MWF 11:00-12:00'), ('Biology', 'Dr. Brown', 'TTh 1:00-2:30')]\n",
            "[('Data analytics', 'Mukta', 'MWF 9:00-10:00'), ('Physics', 'Dr. Johnson', 'TTh 10:00-11:30'), ('Chemistry', 'Dr. Lee', 'MWF 11:00-12:00'), ('Biology', 'Dr. Brown', 'TTh 1:00-2:30')]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Problem 8** Represent points in 3D space as tuples containing x, y, and z coordinates. Create a list of these point tuples. Write functions to add a new point, calculate the distance between two points, and find the point closest to the origin.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "OKyZBm3WDiAN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "# Initialize an empty list to store point tuples\n",
        "points = []\n",
        "\n",
        "# Add points to the list (x, y, z)\n",
        "points.append((1, 2, 3))\n",
        "points.append((4, 5, 6))\n",
        "points.append((7, 8, 9))\n",
        "\n",
        "# Print the current list of points\n",
        "print(\"Current list of points:\")\n",
        "for point in points:\n",
        "    print(point)\n",
        "\n",
        "# Adding a new point\n",
        "new_point = (10, 11, 12)\n",
        "points.append(new_point)\n",
        "\n",
        "# Print the updated list of points\n",
        "print(\"\\nUpdated list of points after adding a new point:\")\n",
        "for point in points:\n",
        "    print(point)\n",
        "\n",
        "# Calculate the distance between two points\n",
        "point1 = points[0]  # First point\n",
        "point2 = points[1]  # Second point\n",
        "\n",
        "distance = math.sqrt((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2 + (point2[2] - point1[2])**2)\n",
        "print(f\"\\nDistance between points {point1} and {point2}: {distance}\")\n",
        "\n",
        "# Find the point closest to the origin\n",
        "origin = (0, 0, 0)\n",
        "closest_point = None\n",
        "min_distance = float('inf')\n",
        "\n",
        "for point in points:\n",
        "    distance = math.sqrt((point[0] - origin[0])**2 + (point[1] - origin[1])**2 + (point[2] - origin[2])**2)\n",
        "    if distance < min_distance:\n",
        "        min_distance = distance\n",
        "        closest_point = point\n",
        "\n",
        "print(f\"\\nPoint closest to the origin: {closest_point} with distance {min_distance}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L4cD_hBHCs3G",
        "outputId": "9b39aa39-55dc-4ccd-f4dc-067e3b87dc70"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Current list of points:\n",
            "(1, 2, 3)\n",
            "(4, 5, 6)\n",
            "(7, 8, 9)\n",
            "\n",
            "Updated list of points after adding a new point:\n",
            "(1, 2, 3)\n",
            "(4, 5, 6)\n",
            "(7, 8, 9)\n",
            "(10, 11, 12)\n",
            "\n",
            "Distance between points (1, 2, 3) and (4, 5, 6): 5.196152422706632\n",
            "\n",
            "Point closest to the origin: (1, 2, 3) with distance 3.7416573867739413\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DsUoCeHnD-IW"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
